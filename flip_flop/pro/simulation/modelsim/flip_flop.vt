// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/18/2020 14:38:58"
                                                                                
// Verilog Test Bench template for design : flip_flop
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ns
module flip_flop_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg sys_clk;
reg sys_rst_n;
reg key_in;

// wires                                               
wire led_out;

// assign statements (if any)                          
flip_flop i1 (
// port map - connection between master ports and signals/registers   
	.key_in(key_in),
	.led_out(led_out),
	.sys_clk(sys_clk),
	.sys_rst_n(sys_rst_n)
);
initial
begin 
  sys_clk    = 1'b1;
  key_in    <= 1'b1;
  sys_rst_n <= 1'b0; 
  #20
  sys_rst_n <= 1'b1;
  #210
  sys_rst_n <= 1'b0;
  #60
  sys_rst_n <= 1'b1;
  
end                                                    
always  #10  sys_clk = ~sys_clk;
always  #30  key_in <= ($random) % 2;

initial begin
  $timeformat(-9, 0, "ns", 6 );
  $monitor("@time:%t key_in:%b  led_out:%b", $time, key_in, led_out);
end                                               
                                                                   
endmodule

