// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/16/2020 14:05:02"
                                                                                
// Verilog Test Bench template for design : half_adder
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ns
module half_adder_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg in1;
reg in2;
// wires                                               
wire cout;
wire sum;

// assign statements (if any)                          
half_adder i1 (
// port map - connection between master ports and signals/registers   
	.cout(cout),
	.in1(in1),
	.in2(in2),
	.sum(sum)
);
initial                                                
begin                                                  
   in1 <= 1'b0;
   in2 <= 1'b0;	
end
                                                    
always  #10 in1 <= {$random} % 2;
always  #10 in2 <= {$random} % 2; 

initial 
begin                                              
    $timeformat(-9, 0, "ns", 6 ); 
	 $monitor( "@time:%t, in1 = %b, in2 = %b, sum = %b, cout = %b", $time, in1, in2, sum, cout);
end	  
endmodule

