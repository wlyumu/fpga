// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/27/2020 12:34:46"
                                                                                
// Verilog Test Bench template for design : uart_top
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ns
module uart_top_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg rst_n;
reg uart_rx;
// wires                                               
wire uart_tx;

// assign statements (if any)                          
uart_top i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.rst_n(rst_n),
	.uart_rx(uart_rx),
	.uart_tx(uart_tx)
);
initial                                                
begin
    clk   = 1'b0;
    rst_n = 1'b0;	 
    #100 rst_n = 1'b1;
    #10 uart_rx = 1'b0;
	 #10 uart_rx = 1'b1;
	 #10 uart_rx = 1'b1;
	 #10 uart_rx = 1'b0;
	 #10 uart_rx = 1'b1;
	 #10 uart_rx = 1'b0;
	 #10 uart_rx = 1'b1;
	 #10 uart_rx = 1'b0;
	 #10 uart_rx = 1'b1;
	 
 //   #1000 $stop;	 
end                                                    
always #10 clk = ~clk;                                                   
endmodule

